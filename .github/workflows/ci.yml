name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  RUBY_VERSION: 3.2
  CASSANDRA_VERSION: 4.1

jobs:
  # Static Analysis
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libuv1-dev libssl-dev zlib1g-dev

      - name: Run RuboCop
        run: bundle exec rubocop --parallel --format github

      - name: Run Sorbet type checking
        run: bundle exec srb tc

      - name: Generate Tapioca signatures
        run: bundle exec tapioca gem

      - name: Verify Sorbet signatures
        run: bundle exec srb tc --ignore-untyped

  # Test Matrix
  test:
    name: Test Ruby ${{ matrix.ruby }} / Cassandra ${{ matrix.cassandra }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ruby: ['3.0', '3.1', '3.2', '3.3']
        cassandra: ['3.11', '4.0', '4.1']
        include:
          - ruby: '3.2'
            cassandra: '4.1'
            coverage: true
    
    services:
      cassandra:
        image: cassandra:${{ matrix.cassandra }}
        env:
          CASSANDRA_CLUSTER_NAME: TestCluster
          CASSANDRA_NUM_TOKENS: 256
          CASSANDRA_RPC_ADDRESS: 0.0.0.0
          CASSANDRA_LISTEN_ADDRESS: cassandra
          CASSANDRA_BROADCAST_ADDRESS: 127.0.0.1
          CASSANDRA_BROADCAST_RPC_ADDRESS: 127.0.0.1
          MAX_HEAP_SIZE: 512m
          HEAP_NEWSIZE: 100m
        ports:
          - 9042:9042
        options: >-
          --health-cmd "cqlsh -e 'describe keyspaces'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 60s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libuv1-dev libssl-dev zlib1g-dev libgmp-dev libffi-dev \
            libyaml-dev libreadline-dev libncurses5-dev

      - name: Install DataStax C++ driver
        run: |
          cd /tmp
          wget https://github.com/datastax/cpp-driver/archive/2.16.2.tar.gz
          tar -xzf 2.16.2.tar.gz
          cd cpp-driver-2.16.2
          mkdir build && cd build
          cmake .. -DCASS_BUILD_STATIC=ON -DCASS_BUILD_SHARED=ON \
            -DCASS_USE_STATIC_LIBS=ON -DCASS_USE_ZLIB=ON -DCASS_USE_OPENSSL=ON
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Wait for Cassandra
        run: |
          timeout 300 bash -c 'until nc -z localhost 9042; do sleep 1; done'
          sleep 10

      - name: Set up test keyspace
        run: |
          cqlsh -e "CREATE KEYSPACE IF NOT EXISTS cassandra_cpp_test 
                    WITH REPLICATION = {
                      'class': 'SimpleStrategy', 
                      'replication_factor': 1
                    };"

      - name: Run tests
        run: bundle exec rspec --format documentation --format RspecJunitFormatter --out tmp/rspec.xml
        env:
          CASSANDRA_HOSTS: localhost
          CASSANDRA_PORT: 9042
          CASSANDRA_KEYSPACE: cassandra_cpp_test
          COVERAGE: ${{ matrix.coverage }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-ruby-${{ matrix.ruby }}-cassandra-${{ matrix.cassandra }}
          path: tmp/rspec.xml

      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: ruby-${{ matrix.ruby }}-cassandra-${{ matrix.cassandra }}

  # Performance Benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      cassandra:
        image: cassandra:4.1
        env:
          CASSANDRA_CLUSTER_NAME: BenchmarkCluster
          CASSANDRA_NUM_TOKENS: 256
          CASSANDRA_RPC_ADDRESS: 0.0.0.0
          CASSANDRA_LISTEN_ADDRESS: cassandra
          CASSANDRA_BROADCAST_ADDRESS: 127.0.0.1
          CASSANDRA_BROADCAST_RPC_ADDRESS: 127.0.0.1
          MAX_HEAP_SIZE: 1g
          HEAP_NEWSIZE: 200m
        ports:
          - 9042:9042
        options: >-
          --health-cmd "cqlsh -e 'describe keyspaces'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 60s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libuv1-dev libssl-dev zlib1g-dev

      - name: Install DataStax C++ driver
        run: |
          cd /tmp
          wget https://github.com/datastax/cpp-driver/archive/2.16.2.tar.gz
          tar -xzf 2.16.2.tar.gz
          cd cpp-driver-2.16.2
          mkdir build && cd build
          cmake .. -DCASS_BUILD_STATIC=ON -DCASS_BUILD_SHARED=ON
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Wait for Cassandra
        run: |
          timeout 300 bash -c 'until nc -z localhost 9042; do sleep 1; done'
          sleep 15

      - name: Set up benchmark keyspace
        run: |
          cqlsh -e "CREATE KEYSPACE IF NOT EXISTS cassandra_cpp_benchmark 
                    WITH REPLICATION = {
                      'class': 'SimpleStrategy', 
                      'replication_factor': 1
                    };"

      - name: Run performance benchmarks
        run: |
          bundle exec rake benchmark:all > benchmark_results.txt
        env:
          CASSANDRA_HOSTS: localhost
          CASSANDRA_PORT: 9042
          CASSANDRA_KEYSPACE: cassandra_cpp_benchmark

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.txt

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run Bundler Audit
        run: |
          gem install bundler-audit
          bundle audit check --update

      - name: Run Brakeman (if Rails app)
        run: |
          if [ -f "config/application.rb" ]; then
            gem install brakeman
            bundle exec brakeman -q -z
          fi

  # Build and Package
  build:
    name: Build Gem
    runs-on: ubuntu-latest
    needs: [static-analysis, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libuv1-dev libssl-dev zlib1g-dev

      - name: Install DataStax C++ driver
        run: |
          cd /tmp
          wget https://github.com/datastax/cpp-driver/archive/2.16.2.tar.gz
          tar -xzf 2.16.2.tar.gz
          cd cpp-driver-2.16.2
          mkdir build && cd build
          cmake .. -DCASS_BUILD_STATIC=ON -DCASS_BUILD_SHARED=ON
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build gem
        run: bundle exec rake build

      - name: Upload gem artifact
        uses: actions/upload-artifact@v4
        with:
          name: gem-package
          path: pkg/*.gem

  # Documentation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Generate YARD documentation
        run: bundle exec yard doc

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./doc
          destination_dir: api-docs

  # Compatibility Check
  compatibility:
    name: Compatibility Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, macos-latest, macos-12]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libuv1-dev libssl-dev zlib1g-dev

      - name: Install system dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install cmake pkg-config libuv openssl zlib

      - name: Test compilation
        run: bundle exec rake compile