name: Release

on:
  push:
    tags:
      - 'v*'

env:
  RUBY_VERSION: 3.2

jobs:
  # Pre-release checks
  pre-release:
    name: Pre-release Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Verify version consistency
        run: |
          # Check that gemspec version matches tag
          GEMSPEC_VERSION=$(ruby -e "
            require './lib/cassandra_cpp/version'
            puts CassandraCpp::VERSION
          ")
          
          if [ "$GEMSPEC_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Version mismatch: tag=${{ steps.version.outputs.version }}, gemspec=$GEMSPEC_VERSION"
            exit 1
          fi

      - name: Run full test suite
        run: |
          docker-compose -f docker-compose.yml up -d cassandra-1 cassandra-2
          sleep 60
          bundle exec rspec
        env:
          CASSANDRA_HOSTS: localhost
          CASSANDRA_PORT: 9042

  # Build release artifacts
  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: pre-release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libuv1-dev libssl-dev zlib1g-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake pkg-config libuv openssl zlib

      - name: Install DataStax C++ driver
        run: |
          cd /tmp
          wget https://github.com/datastax/cpp-driver/archive/2.16.2.tar.gz
          tar -xzf 2.16.2.tar.gz
          cd cpp-driver-2.16.2
          mkdir build && cd build
          
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            cmake .. -DCASS_BUILD_STATIC=ON -DCASS_BUILD_SHARED=ON \
              -DOPENSSL_ROOT_DIR=$(brew --prefix openssl)
          else
            cmake .. -DCASS_BUILD_STATIC=ON -DCASS_BUILD_SHARED=ON
          fi
          
          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo make install
            sudo ldconfig
          else
            make install
          fi

      - name: Build native gem
        run: |
          bundle exec rake build:native
          mv pkg/*.gem pkg/cassandra-cpp-${{ needs.pre-release.outputs.version }}-${{ matrix.platform }}.gem

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: gem-${{ matrix.platform }}
          path: pkg/*.gem

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release, build-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog section for this version
          VERSION=${{ needs.pre-release.outputs.version }}
          
          if [ -f CHANGELOG.md ]; then
            # Extract section between version headers
            CHANGELOG=$(awk "/^## \[?$VERSION\]?/,/^## \[?[0-9]/ { 
              if (/^## \[?[0-9]/ && !/^## \[?$VERSION\]?/) exit; 
              if (!/^## \[?$VERSION\]?/) print 
            }" CHANGELOG.md | sed '/^$/d')
          else
            CHANGELOG="Release $VERSION"
          fi
          
          # Save to file and output
          echo "$CHANGELOG" > changelog.txt
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ needs.pre-release.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ needs.pre-release.outputs.prerelease }}
          files: artifacts/**/*.gem
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to RubyGems
  publish-rubygems:
    name: Publish to RubyGems
    runs-on: ubuntu-latest
    needs: [pre-release, build-release, create-release]
    if: needs.pre-release.outputs.prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libuv1-dev libssl-dev zlib1g-dev

      - name: Install DataStax C++ driver
        run: |
          cd /tmp
          wget https://github.com/datastax/cpp-driver/archive/2.16.2.tar.gz
          tar -xzf 2.16.2.tar.gz
          cd cpp-driver-2.16.2
          mkdir build && cd build
          cmake .. -DCASS_BUILD_STATIC=ON -DCASS_BUILD_SHARED=ON
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and publish gem
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:rubygems_api_key: ${RUBYGEMS_API_KEY}\n" > $HOME/.gem/credentials
          
          bundle exec rake build
          gem push pkg/*.gem
        env:
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.pre-release.outputs.prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Generate documentation
        run: |
          bundle exec yard doc
          bundle exec yard stats --list-undoc

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./doc
          destination_dir: api-docs
          commit_message: 'docs: update API documentation for v${{ needs.pre-release.outputs.version }}'

  # Notify stakeholders
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [pre-release, publish-rubygems, update-docs]
    if: always()
    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            üéâ Cassandra-CPP v${{ needs.pre-release.outputs.version }} has been released!
            
            üì¶ Available on RubyGems: https://rubygems.org/gems/cassandra-cpp
            üìö Documentation: https://your-org.github.io/cassandra-cpp/api-docs/
            üîó Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.pre-release.outputs.version }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå Cassandra-CPP v${{ needs.pre-release.outputs.version }} release failed!
            
            Please check the workflow logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}