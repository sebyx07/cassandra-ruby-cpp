#!/usr/bin/env bash

# Test runner script for Cassandra-CPP
# This script can be run both locally and inside containers

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Logging functions
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

debug() {
    if [[ "${DEBUG:-}" == "1" ]]; then
        echo -e "${BLUE}[DEBUG]${NC} $1"
    fi
}

# Check if we're in a container
in_container() {
    [[ -f /.dockerenv ]] || [[ -n "${CONTAINER:-}" ]]
}

# Wait for Cassandra to be ready
wait_for_cassandra() {
    log "Waiting for Cassandra to be ready..."
    
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if cqlsh -e "describe keyspaces" >/dev/null 2>&1; then
            log "Cassandra is ready!"
            return 0
        fi
        
        debug "Attempt $attempt/$max_attempts: Waiting for Cassandra..."
        sleep 2
        ((attempt++))
    done
    
    error "Cassandra failed to start within expected time"
    return 1
}

# Setup test environment
setup_test_env() {
    log "Setting up test environment..."
    
    cd "$PROJECT_ROOT"
    
    # Ensure gems are installed
    if ! bundle check >/dev/null 2>&1; then
        log "Installing gems..."
        bundle install
    fi
    
    # Compile extension if needed
    if [[ ! -f "lib/cassandra_cpp/cassandra_cpp.so" ]] && [[ ! -f "lib/cassandra_cpp/cassandra_cpp.bundle" ]]; then
        log "Compiling native extension..."
        bundle exec rake compile
    fi
    
    # Wait for Cassandra if in container
    if in_container; then
        wait_for_cassandra
    fi
}

# Run specific test type
run_tests() {
    local test_type="${1:-all}"
    
    log "Running tests: $test_type"
    
    case "$test_type" in
        "unit")
            bundle exec rspec spec/unit/ --format documentation
            ;;
        "integration")
            bundle exec rspec spec/integration/ --format documentation
            ;;
        "fast")
            bundle exec rspec spec/unit/ --format progress
            ;;
        "coverage")
            COVERAGE=true bundle exec rspec --format documentation
            ;;
        "performance")
            PROFILE_TESTS=true bundle exec rspec spec/integration/ --format documentation
            ;;
        "all"|*)
            bundle exec rspec --format documentation
            ;;
    esac
}

# Show status
show_status() {
    log "Cassandra-CPP Test Environment Status"
    echo "=" * 50
    
    # Ruby version
    echo "Ruby: $(ruby -v)"
    
    # Bundler status
    if bundle check >/dev/null 2>&1; then
        echo "Gems: ✅ All gems installed"
    else
        echo "Gems: ❌ Missing gems - run 'bundle install'"
    fi
    
    # Extension status
    if ruby -e "require './lib/cassandra_cpp'; puts CassandraCpp.native_extension_loaded?" 2>/dev/null | grep -q "true"; then
        echo "Extension: ✅ Native C++ extension loaded"
    else
        echo "Extension: ❌ Native extension not loaded"
    fi
    
    # Cassandra status
    if cqlsh -e "SELECT release_version FROM system.local" >/dev/null 2>&1; then
        local version=$(cqlsh -e "SELECT release_version FROM system.local" 2>/dev/null | grep -E "^\s*[0-9]" | tr -d ' ')
        echo "Cassandra: ✅ Connected (v$version)"
    else
        echo "Cassandra: ❌ Not available"
    fi
    
    echo "Environment: $(in_container && echo "Container" || echo "Local")"
}

# Show help
show_help() {
    cat << EOF
Cassandra-CPP Test Runner

Usage: $0 [OPTIONS] [TEST_TYPE]

TEST_TYPES:
  unit         Run unit tests only
  integration  Run integration tests only
  fast         Run unit tests with minimal output
  coverage     Run all tests with coverage
  performance  Run performance benchmarks
  all          Run all tests (default)

OPTIONS:
  --setup      Setup test environment first
  --status     Show environment status
  --debug      Enable debug output
  --help       Show this help message

EXAMPLES:
  $0                    # Run all tests
  $0 unit              # Run unit tests only
  $0 --setup all       # Setup environment then run all tests
  $0 --status          # Show status only

CONTAINER USAGE:
  # Run in development container
  docker-compose run --rm cassandra-cpp-dev bin/test

  # Run specific tests in container
  docker exec -it cassandra-cpp-dev bin/test unit

EOF
}

# Parse arguments
SETUP=false
STATUS_ONLY=false
TEST_TYPE="all"

while [[ $# -gt 0 ]]; do
    case $1 in
        --setup)
            SETUP=true
            shift
            ;;
        --status)
            STATUS_ONLY=true
            shift
            ;;
        --debug)
            export DEBUG=1
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        unit|integration|fast|coverage|performance|all)
            TEST_TYPE=$1
            shift
            ;;
        *)
            error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Main execution
main() {
    log "Starting Cassandra-CPP test runner..."
    
    if [[ "$STATUS_ONLY" == "true" ]]; then
        show_status
        exit 0
    fi
    
    if [[ "$SETUP" == "true" ]]; then
        setup_test_env
    fi
    
    show_status
    echo ""
    
    if ! run_tests "$TEST_TYPE"; then
        error "Tests failed!"
        exit 1
    fi
    
    log "✅ All tests passed!"
}

# Run main function
main "$@"